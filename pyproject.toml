[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quorum-app"
version = "0.1.0"
description = "A legislative voting app"
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "Flask>=2.3",
    "Flask-SQLAlchemy>=3.0",
    "SQLAlchemy>=2.0",
    "pandas>=2.0",
    "pydantic>=2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-env>=0.6",
    "ruff>=0.1.0",
    "djlint>=1.34.0",
]

[tool.ruff]
# Same as Black.
line-length = 88
# Assume Python 3.8+.
target-version = "py38"

[tool.ruff.format]
# Enable Ruff's formatter (replaces Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable comprehensive linting rules
select = ["E", "F", "W", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "S101",   # Use of assert detected
    "PT009",  # Use a regular assert instead of unittest-style
    "PT027",  # Use pytest.raises instead of unittest-style
    "B008",   # Do not perform function calls in argument defaults
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    
    # Non-critical style and modernization rules
    "PTH100", # os.path.abspath should be replaced by Path.resolve
    "PTH108", # os.unlink should be replaced by Path.unlink
    "PTH110", # os.path.exists should be replaced by Path.exists
    "PTH120", # os.path.dirname should be replaced by Path.parent
    "PTH123", # open() should be replaced by Path.open
    "E501",   # Line too long (let Black handle formatting)
    "BLE001", # Do not catch blind exception (often intentional in batch processing)
    "PT011",  # pytest.raises too broad (nice-to-have, not critical)
    "DTZ005", # datetime.now() without timezone (often not needed)
    "S104",   # Possible binding to all interfaces (common in dev)
    "S603",   # subprocess call check (often safe in controlled scripts)
    "S112",   # try-except-continue (acceptable pattern in batch processing)
    "PERF203", # try-except in loop (sometimes necessary)
    "FBT001", # Boolean positional argument (common in result objects)
    "FBT003", # Boolean positional value in function call
    "PLR0913", # Too many arguments (sometimes necessary)
    "ARG002", # Unused method argument (base classes often have unused params)
    "F811",   # Redefinition of unused (acceptable in some import patterns)
    "E402",   # Module level import not at top (sometimes needed for path setup)
    "PLC0415", # import should be at top-level (conflicts with dynamic imports)
    "INP001", # Missing __init__.py (not always required in modern Python)
    "PLR2004", # Magic value comparison (acceptable for simple constants)
    "TRY300", # Consider moving to else block (style preference)
    "TC002",  # Move third-party import into type-checking block (not always safe)
    "TC003",  # Move standard library import into type-checking block (not always safe)
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG"]
# Settings files can have unused imports
"settings/**/*" = ["F401"]
# Migration scripts and data import scripts can be more flexible
"scripts/**/*" = ["T201", "S608", "PLR2004"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.djlint]
profile = "jinja"
extension = "html"
indent = 2
max_line_length = 88
format_attribute_template_tags = true
close_void_tags = true
ignore = "H006,H030,H031"  # H006: img missing alt, H030/H031: meta tags (often handled by Flask)

[tool.djlint.per-file-ignores]
"templates/base.html" = ["H025"]  # Missing lang attribute (already present)
